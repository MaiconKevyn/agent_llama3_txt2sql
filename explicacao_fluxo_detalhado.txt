# EXPLICA√á√ÉO DETALHADA DO FLUXO PRINCIPAL - PROJETO TXT2SQL

Este documento explica cada etapa do diagrama de fluxo principal do projeto TXT2SQL, especificando onde cada passo acontece no c√≥digo e o que ocorre em cada etapa.

## üìä MAPEAMENTO COMPLETO DO FLUXO PRINCIPAL

### 1. ENTRADA DO USU√ÅRIO ‚Üí PONTOS DE ENTRADA (Etapas A-B)
**Fluxo:** Usu√°rio faz pergunta ‚Üí Sele√ß√£o do ponto de entrada

**ONDE ACONTECE:**
- **Flask App (Porta 5000):** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/flask_app.py`
  - **Rota:** `@app.route('/api/query', methods=['POST'])` (linha 230)
  - **M√©todo:** `query_api()` (linha 231)
  
- **FastAPI (Porta 8000):** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/api_server.py`
  - **Rota:** `@app.post("/query", response_model=QueryResponse)` (linha 245)
  - **M√©todo:** `query_database(request: QueryRequest)` (linha 246)

**O QUE ACONTECE:**
- Usu√°rio envia uma pergunta como "Quantos pacientes s√£o homens?" via requisi√ß√£o HTTP POST
- O endpoint recebe a pergunta em formato JSON: {"question": "Quantos pacientes s√£o homens?"}
- A aplica√ß√£o web captura a entrada do usu√°rio e encaminha para o orquestrador

### 2. TEXT2SQL ORCHESTRATOR (Etapa C)
**Fluxo:** Ponto de entrada ‚Üí Coordena√ß√£o central

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/orchestrator/text2sql_orchestrator.py`
- **M√©todo Principal:** `process_conversational_query(query: str)` (linha 462)
- **M√©todo de Processamento:** `process_single_query(query: str)` (linha 135)

**O QUE ACONTECE:**
```python
# Exemplo de execu√ß√£o
def process_conversational_query(self, query: str) -> Dict[str, Any]:
    # Processa a query normalmente
    result = self.process_single_query(query)  # Linha 473
    
    # Formata com resposta conversacional
    formatted_response = self._format_query_result(result, query)  # Linha 476
```
- O orquestrador coordena todo o fluxo de processamento
- Gerencia inje√ß√£o de depend√™ncias entre servi√ßos
- Controla o tempo de execu√ß√£o e metadados

### 3. VALIDA√á√ÉO E SANITIZA√á√ÉO (Etapa D)
**Fluxo:** Orquestrador ‚Üí Valida√ß√£o de entrada

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/orchestrator/text2sql_orchestrator.py`
- **Se√ß√£o do C√≥digo:** linhas 146-151

**O QUE ACONTECE:**
```python
# Valida entrada
if not InputValidator.validate_query_length(query, self._config.max_query_length):
    raise ValueError(f"Query too long (max {self._config.max_query_length} characters)")

# Sanitiza entrada
sanitized_query = InputValidator.sanitize_input(query)
```

**EXEMPLOS DE VALIDA√á√ÉO:**
- Verifica se a pergunta n√£o excede 1000 caracteres
- Remove caracteres especiais que poderiam causar problemas
- Previne ataques de inje√ß√£o SQL
- Normaliza espa√ßos em branco e quebras de linha

### 4. CRIA√á√ÉO DO QUERYREQUEST (Etapa E)
**Fluxo:** Valida√ß√£o ‚Üí Cria√ß√£o de objeto de requisi√ß√£o

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/orchestrator/text2sql_orchestrator.py`
- **Se√ß√£o do C√≥digo:** linhas 153-158

**O QUE ACONTECE:**
```python
# Cria requisi√ß√£o de query
request = QueryRequest(
    user_query=sanitized_query,
    session_id=self._session_id,
    timestamp=datetime.now()
)
```

**EXEMPLO PR√ÅTICO:**
- Para a pergunta "Quantos homens?", cria:
  - user_query: "Quantos homens?"
  - session_id: "abc123-uuid"
  - timestamp: "2025-06-20T11:30:00.000Z"

### 5. QUERY PROCESSING SERVICE (Etapa F)
**Fluxo:** QueryRequest ‚Üí Processamento de linguagem natural

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/query_processing_service.py`
- **M√©todo Principal:** `process_natural_language_query(request: QueryRequest)` (linha 126)

**O QUE ACONTECE:**
```python
# Obt√©m contexto do schema
schema_context = self._schema_service.get_schema_context()  # Linha 132

# Cria prompt melhorado com contexto do schema
enhanced_prompt = self._create_enhanced_prompt(request.user_query, schema_context)  # Linha 135

# Processa com agente LangChain
agent_response = self._agent.run(enhanced_prompt)  # Linha 138
```

**EXEMPLO PR√ÅTICO:**
- Recebe: "Quantos homens?"
- Prepara o contexto do banco SUS
- Cria prompt especializado para sa√∫de

### 6. SCHEMA INTROSPECTION SERVICE (Etapa G)
**Fluxo:** Processamento de query ‚Üí Contexto do schema do banco

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/schema_introspection_service.py`
- **M√©todo Principal:** `get_schema_context(self)` (linha 118)

**O QUE ACONTECE:**
```python
# Obt√©m informa√ß√µes da tabela
sus_table = self.get_table_info("sus_data")  # Linha 124

# Define notas importantes espec√≠ficas para dados SUS
important_notes = [
    "IMPORTANTE: Para consultas baseadas em cidade, use a coluna CIDADE_RESIDENCIA_PACIENTE",
    "A coluna MUNIC_RES cont√©m c√≥digos num√©ricos de munic√≠pio, N√ÉO nomes de cidades",
    "Use MORTE = 1 para consultas sobre √≥bitos/mortes",
    "C√≥digos de sexo: 1=Masculino, 3=Feminino (padr√£o SUS)"
]  # Linhas 127-133
```

**EXEMPLO PR√ÅTICO:**
- Informa que SEXO = 1 significa "masculino"
- Explica estrutura das tabelas SUS
- Fornece exemplos de consultas de sa√∫de

### 7. CONTEXTO DO BANCO SUS (Etapa H)
**Fluxo:** Schema ‚Üí Regras espec√≠ficas SUS

**ONDE ACONTECE:**
- **Arquivo:** Mesmo arquivo da etapa 6
- **M√©todo:** `_format_context()` (linha 164)

**O QUE ACONTECE:**
- Adiciona terminologia espec√≠fica do SUS
- Fornece exemplos de consultas de sa√∫de comuns
- Contextualiza significados das colunas para dom√≠nio de sa√∫de

**EXEMPLO PR√ÅTICO:**
```
"SEXO = 1 significa paciente masculino/homem"
"MORTE = 1 significa que o paciente faleceu"
"CIDADE_RESIDENCIA_PACIENTE cont√©m nomes de cidades"
```

### 8. PROMPT MELHORADO + REGRAS SUS (Etapa I)
**Fluxo:** Contexto ‚Üí Prompt otimizado para LLM

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/query_processing_service.py`
- **M√©todo:** `_create_enhanced_prompt(user_query, schema_context)` (linha 285)

**O QUE ACONTECE:**
```python
enhanced_prompt = f"""
{schema_context.formatted_context}

Pergunta do usu√°rio: {user_query}

IMPORTANTE - Regras para filtros demogr√°ficos:
- SEXO = 1 significa masculino/homem
- SEXO = 3 significa feminino/mulher  
- MORTE = 1 significa que o paciente morreu
- MORTE = 0 significa que o paciente n√£o morreu
"""
```

**EXEMPLO PR√ÅTICO:**
- Para "Quantos homens?", o prompt fica:
- "Pergunta: Quantos homens? REGRA: SEXO = 1 significa masculino"

### 9. LANGCHAIN SQL AGENT (LLM LAYER 1) (Etapa J)
**Fluxo:** Prompt melhorado ‚Üí Gera√ß√£o de SQL via LLM

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/query_processing_service.py`
- **Setup:** `_setup_langchain_agent()` (linha 94)
- **Execu√ß√£o:** `agent_response = self._agent.run(enhanced_prompt)` (linha 138)

**O QUE ACONTECE:**
```python
# Cria agente SQL
self._agent = create_sql_agent(
    llm=llm_instance,
    toolkit=self._toolkit,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True
)  # Linhas 114-120
```

**EXEMPLO PR√ÅTICO:**
- Recebe: "Quantos homens? REGRA: SEXO=1 √© masculino"
- Gera SQL: `SELECT COUNT(*) FROM sus_data WHERE SEXO = 1`

### 10. DATABASE SERVICE (Etapa K)
**Fluxo:** Agente SQL ‚Üí Execu√ß√£o no banco

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/database_connection_service.py`
- **M√©todos:**
  - `get_connection()` ‚Üí Retorna LangChain SQLDatabase (linha 48)
  - `get_raw_connection()` ‚Üí Retorna conex√£o SQLite raw (linha 54)

**O QUE ACONTECE:**
- Agente LangChain usa conex√£o SQLDatabase para executar queries
- Conex√£o raw dispon√≠vel para SQL direto
- Gerencia opera√ß√µes do banco SQLite

### 11. EXECU√á√ÉO SQL (Etapa L)
**Fluxo:** Servi√ßo de banco ‚Üí Resultados SQL brutos

**ONDE ACONTECE:**
- Conex√£o do banco executa SQL atrav√©s do agente LangChain

**O QUE ACONTECE:**
- Agente gera query SQL (ex: `SELECT COUNT(*) FROM sus_data WHERE SEXO = 1`)
- Banco executa query e retorna resultados brutos
- Resultados est√£o em formato SQLite

**EXEMPLO PR√ÅTICO:**
```sql
SELECT COUNT(*) FROM sus_data WHERE SEXO = 1
-- Resultado: [{'count': 28}]
```

### 12. CORRE√á√ÉO CASE SENSITIVITY (Etapa M)
**Fluxo:** Resultados brutos ‚Üí Queries SQL corrigidas

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/query_processing_service.py`
- **M√©todo:** `_fix_case_sensitivity_issues(sql_query)` (linha 327)

**O QUE ACONTECE:**
```python
# Corrige o padr√£o: CIDADE_RESIDENCIA_PACIENTE = UPPER('city') ou LOWER('city')
# Converte para: CIDADE_RESIDENCIA_PACIENTE = 'City' (case adequado)

pattern_upper = r"CIDADE_RESIDENCIA_PACIENTE\s*=\s*UPPER\s*\(\s*'([^']+)'\s*\)"
def replacement_upper(match):
    city_name = match.group(1)
    proper_city = city_name.title()  # 'porto alegre' ‚Üí 'Porto Alegre'
    return f"CIDADE_RESIDENCIA_PACIENTE = '{proper_city}'"
```

**EXEMPLO PR√ÅTICO:**
- Query incorreta: `WHERE CIDADE_RESIDENCIA_PACIENTE = UPPER('porto alegre')`
- Query corrigida: `WHERE CIDADE_RESIDENCIA_PACIENTE = 'Porto Alegre'`

### 13. PARSE DE RESULTADOS (Etapas N-O)
**Fluxo:** Queries corrigidas ‚Üí Objeto QueryResult estruturado

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/query_processing_service.py`
- **M√©todo:** `_parse_agent_results(response)` (linha 369)

**O QUE ACONTECE:**
```python
# Parse dos resultados da resposta do agente
results, row_count = self._parse_agent_results(agent_response)  # Linha 147

# Cria objeto QueryResult
query_result = QueryResult(
    sql_query=sql_query,
    results=results,
    success=True,
    execution_time=execution_time,
    row_count=row_count,
    metadata={
        "agent_response": agent_response,
        "schema_context_used": True,
        "langchain_agent": True
    }
)  # Linhas 159-170
```

**EXEMPLO PR√ÅTICO:**
- Resultado bruto: `[{'count': 28}]`
- QueryResult estruturado com metadata, tempo de execu√ß√£o, etc.

### 14. DECIS√ÉO RESPOSTA CONVERSACIONAL (Etapa Q)
**Fluxo:** QueryResult ‚Üí Determina√ß√£o de resposta conversacional

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/orchestrator/text2sql_orchestrator.py`
- **M√©todo:** `_format_query_result(result, user_query)` (linha 326)

**O QUE ACONTECE:**
```python
if (self._config.enable_conversational_response and 
    self._conversational_service and 
    self._conversational_service.is_conversational_llm_available()):
    # Gera resposta conversacional
```

**EXEMPLO PR√ÅTICO:**
- Se conversational_response=True: vai para resposta amig√°vel
- Se conversational_response=False: retorna resposta b√°sica

### 15. CONVERSATIONAL RESPONSE SERVICE (Etapa S)
**Fluxo:** Decis√£o: Sim ‚Üí Processamento conversacional

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/conversational_response_service.py`
- **M√©todo:** `generate_response()` (linha 78)

**O QUE ACONTECE:**
```python
conversational_response = self._conversational_service.generate_response(
    user_query=user_query,
    sql_query=result.sql_query,
    sql_results=result.results,
    session_id=self._session_id,
    error_message=result.error_message or ""
)  # Linhas 335-341
```

**EXEMPLO PR√ÅTICO:**
- Pega resultado `{'count': 28}` 
- Prepara para transformar em resposta amig√°vel

### 16. SUS PROMPT TEMPLATE SERVICE (Etapa T)
**Fluxo:** Servi√ßo conversacional ‚Üí Templates especializados SUS

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/sus_prompt_template_service.py`
- **M√©todos:**
  - `determine_prompt_type()` ‚Üí Analisa tipo de query (linha 424)
  - `get_prompt()` ‚Üí Retorna prompt especializado (linha 345)

**O QUE ACONTECE:**
```python
class PromptType(Enum):
    BASIC_RESPONSE = "basic_response"
    STATISTICAL_ANALYSIS = "statistical_analysis"
    COMPARATIVE_ANALYSIS = "comparative_analysis"
    GEOGRAPHIC_ANALYSIS = "geographic_analysis"
```

**EXEMPLO PR√ÅTICO:**
- "Quantos homens?" ‚Üí STATISTICAL_ANALYSIS
- "Compare homens e mulheres" ‚Üí COMPARATIVE_ANALYSIS

### 17. DETERMINA√á√ÉO DO TIPO DE AN√ÅLISE (Etapas U-Y)
**Fluxo:** Templates SUS ‚Üí Tipo espec√≠fico de an√°lise

**ONDE ACONTECE:**
- **Arquivo:** Mesmo arquivo da etapa 16
- **M√©todo:** `determine_prompt_type()`

**O QUE ACONTECE:**
```python
statistical_keywords = ['m√©dia', 'total', 'soma', 'count', 'quantidade']
comparative_keywords = ['comparar', 'versus', 'diferen√ßa', 'maior', 'menor']
geographic_keywords = ['estado', 'munic√≠pio', 'regi√£o', 'cidade']

if any(keyword in query_lower for keyword in statistical_keywords):
    return PromptType.STATISTICAL_ANALYSIS
elif any(keyword in query_lower for keyword in comparative_keywords):
    return PromptType.COMPARATIVE_ANALYSIS
```

**EXEMPLO PR√ÅTICO:**
- "Quantos" ‚Üí STATISTICAL_ANALYSIS
- "Qual cidade tem mais" ‚Üí GEOGRAPHIC_ANALYSIS

### 18. PROMPT ESPECIALIZADO SUS (Etapa Z)
**Fluxo:** Tipo de an√°lise ‚Üí Prompt otimizado para SUS

**ONDE ACONTECE:**
- **Arquivo:** Gera√ß√£o de template com base de conhecimento SUS

**O QUE ACONTECE:**
```python
template = """
AN√ÅLISE ESTAT√çSTICA SOLICITADA: {user_query}
DADOS OBTIDOS: {sql_results}

Realize an√°lise estat√≠stica completa incluindo:
- Medidas de tend√™ncia central
- Variabilidade dos dados
- Compara√ß√£o com padr√µes esperados
- Interpreta√ß√£o epidemiol√≥gica
- Recomenda√ß√µes baseadas nos achados
"""
```

**EXEMPLO PR√ÅTICO:**
- Para "Quantos homens?", gera prompt com contexto epidemiol√≥gico
- Include terminologia m√©dica apropriada

### 19. CONVERSATIONAL LLM (LLM LAYER 2) (Etapa AA)
**Fluxo:** Prompt especializado ‚Üí Resposta amig√°vel

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/conversational_llm_service.py`
- **M√©todo:** `generate_conversational_response()` (linha 68)

**O QUE ACONTECE:**
```python
@dataclass
class ConversationalConfig:
    model_name: str = "llama3.2:latest"
    temperature: float = 0.7  # Mais alto para conversa√ß√£o
    max_tokens: int = 1000
    timeout: int = 60
```

**EXEMPLO PR√ÅTICO:**
- Usa Llama3.2 com temperatura 0.7 (mais criativo)
- Especializado em respostas conversacionais

### 20. GERA√á√ÉO DE RESPOSTA EM PORTUGU√äS (Etapa BB)
**Fluxo:** LLM conversacional ‚Üí Resposta de sa√∫de em portugu√™s

**ONDE ACONTECE:**
- **Arquivo:** Prompt system com contexto portugu√™s

**O QUE ACONTECE:**
```python
sus_context = """
Voc√™ √© um assistente especialista em dados do Sistema √önico de Sa√∫de (SUS) brasileiro.
Sua fun√ß√£o √© transformar resultados de consultas SQL em respostas conversacionais
amig√°veis e informativas para profissionais de sa√∫de e gestores p√∫blicos.

CONHECIMENTO ESPEC√çFICO DO SUS:
- CNES: Cadastro Nacional de Estabelecimentos de Sa√∫de
- CID: Classifica√ß√£o Internacional de Doen√ßas
- Terminologia m√©dica em portugu√™s brasileiro
"""
```

**EXEMPLO PR√ÅTICO:**
- Entrada: `{'count': 28}`
- Sa√≠da: "Segundo os dados, 28 pacientes do sexo masculino foram registrados no sistema SUS."

### 21. METADADOS E SUGEST√ïES (Etapa CC)
**Fluxo:** Resposta em portugu√™s ‚Üí Resposta enriquecida

**ONDE ACONTECE:**
- **Arquivo:** `/home/maiconkevyn/PycharmProjects/txt2sql_claude/src/application/services/conversational_response_service.py`
- **M√©todo:** `_generate_suggestions()` (linha 241)

**O QUE ACONTECE:**
```python
suggestions.extend([
    "Gostaria de ver a evolu√ß√£o temporal destes dados?",
    "Quer comparar com outras regi√µes?",
    "Posso mostrar estat√≠sticas detalhadas destes resultados"
])
```

**EXEMPLO PR√ÅTICO:**
- Adiciona sugest√µes relacionadas
- Include metadados como tempo de execu√ß√£o
- Confidence score da resposta

### 22. RESPOSTA FINAL JSON (Etapa DD)
**Fluxo:** Resposta enriquecida ‚Üí Resposta estruturada da API

**ONDE ACONTECE:**
- **Arquivo:** M√∫ltiplos arquivos contribuem para estrutura final

**O QUE ACONTECE:**
```json
{
  "success": true,
  "question": "Quantos pacientes s√£o homens?",
  "response": "Segundo os dados, 28 pacientes do sexo masculino foram registrados no sistema SUS.",
  "execution_time": 12.34,
  "metadata": {
    "conversational_response": true,
    "response_type": "statistical_analysis",
    "confidence_score": 0.9,
    "suggestions": [
      "Gostaria de ver a distribui√ß√£o por faixa et√°ria?",
      "Posso comparar com dados de outras regi√µes"
    ]
  },
  "timestamp": "2025-06-20T11:30:00.000Z"
}
```

## üîÑ ORDEM COMPLETA DE EXECU√á√ÉO

1. **Ponto de Entrada** (Flask/FastAPI) recebe pergunta do usu√°rio
2. **Text2SQLOrchestrator** valida e sanitiza entrada
3. **Objeto QueryRequest** criado com metadados
4. **QueryProcessingService** coordena o processamento
5. **SchemaIntrospectionService** fornece contexto do banco SUS
6. **Prompt melhorado** criado com regras de neg√≥cio SUS
7. **LangChain SQL Agent** (LLM Layer 1) gera SQL
8. **DatabaseService** executa query SQL
9. **Corre√ß√µes case sensitivity** aplicadas aos resultados
10. **Resultados parseados** em formato estruturado
11. **Decis√£o conversacional** feita baseada na configura√ß√£o
12. **ConversationalResponseService** orquestra resposta amig√°vel
13. **SUSPromptTemplateService** fornece templates especializados
14. **Tipo de an√°lise determinado** (estat√≠stica, geogr√°fica, etc.)
15. **Prompt especializado** criado para dom√≠nio da sa√∫de
16. **ConversationalLLM** (LLM Layer 2) gera resposta amig√°vel
17. **Resposta em portugu√™s** com terminologia SUS
18. **Metadados e sugest√µes** adicionados
19. **Resposta JSON final** retornada ao usu√°rio

Este fluxo completo garante que resultados SQL brutos sejam transformados em respostas contextuais e amig√°veis, especificamente otimizadas para profissionais de sa√∫de brasileiros trabalhando com dados SUS.